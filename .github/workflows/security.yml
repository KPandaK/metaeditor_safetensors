name: Security Analysis

on:
  push:
    branches: [ master, dev ]
    paths:
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '**/*.py'
  pull_request:
    branches: [ master, dev ]
    paths:
      - 'requirements*.txt' 
      - 'pyproject.toml'
      - '**/*.py'
  schedule:
    # Run weekly on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  dependency-review:
    name: Dependency Review
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          # Fail on critical vulnerabilities
          fail-on-severity: critical
          # Allow GPL and MIT licenses
          allow-licenses: GPL-2.0, GPL-3.0, MIT, BSD-2-Clause, BSD-3-Clause, Apache-2.0
          # Block known malicious packages
          deny-packages: tensorflow-gpu==2.11.1

  code-scanning:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [ python ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql-config.yml
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  dependency-scanning:
    name: Dependency Vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
          # Install project dependencies for complete audit
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run pip-audit (JSON output for upload)
        run: |
          pip-audit --format=json --output=vulnerability-report.json || true
      
      - name: Run pip-audit (Human readable)
        if: always()
        run: |
          pip-audit --format=columns || true
      
      - name: Upload vulnerability report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report
          path: vulnerability-report.json
          retention-days: 30

  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install security analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] semgrep safety
      
      - name: Run Bandit Security Scan
        run: |
          bandit -r metaeditor_safetensors -f sarif -o bandit-results.sarif || echo "Bandit SARIF generation failed"
          bandit -r metaeditor_safetensors -f txt || echo "Bandit scan completed with issues"
        continue-on-error: true
      
      - name: Run Semgrep Security Scan
        run: |
          semgrep --config=auto --json --output=semgrep-results.json metaeditor_safetensors/ || echo "Semgrep JSON generation failed"
          semgrep --config=auto --text metaeditor_safetensors/ || echo "Semgrep scan completed"
        continue-on-error: true
      
      - name: Upload Bandit SARIF to GitHub Security
        if: always() && hashFiles('bandit-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif
          category: bandit
      
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            bandit-results.sarif
            semgrep-results.json
          retention-days: 30